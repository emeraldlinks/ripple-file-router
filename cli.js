#!/usr/bin/env node
import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";
import readline from "readline";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const args = process.argv.slice(2);

// helper for prompts
function askQuestion(query) {
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  });
  return new Promise((resolve) =>
    rl.question(query, (ans) => {
      rl.close();
      resolve(ans);
    })
  );
}

async function main() {
  if (args[0] === "init") {
    const foldersToCopy = ["pages"];
    const srcDir = path.join(__dirname, "src");
    const targetDir = path.join(process.cwd(), "src");

    foldersToCopy.forEach((folder) => {
      const from = path.join(srcDir, folder);
      const to = path.join(targetDir, folder);

      fs.mkdirSync(to, { recursive: true });

      function copyRecursive(src, dest) {
        const entries = fs.readdirSync(src, { withFileTypes: true });
        for (const entry of entries) {
          const srcPath = path.join(src, entry.name);
          const destPath = path.join(dest, entry.name);

          if (entry.isDirectory()) {
            fs.mkdirSync(destPath, { recursive: true });
            copyRecursive(srcPath, destPath);
          } else if (entry.isFile()) {
            fs.copyFileSync(srcPath, destPath);
          }
        }
      }

      copyRecursive(from, to);
      console.log(`${folder} copied to src/${folder}`);
    });

    // ✅ Copy App.ripple with prompt
    const appSource = path.join(__dirname, "src", "App.ripple");
    const appTarget = path.join(targetDir, "App.ripple");
    const appTargetAlt = path.join(targetDir, "App2.ripple");

    if (fs.existsSync(appSource)) {
      if (fs.existsSync(appTarget)) {
        const ans = await askQuestion(
          "App.ripple already exists in your project. Overwrite it? (y/n): "
        );

        if (ans.toLowerCase() === "y") {
          fs.copyFileSync(appSource, appTarget);
          console.log("App.ripple overwritten in src/");
        } else {
          fs.copyFileSync(appSource, appTargetAlt);
          console.log("App.ripple copied to src/App2.ripple");
        }
      } else {
        fs.copyFileSync(appSource, appTarget);
        console.log("App.ripple copied to src/App.ripple");
      }
    }

    // ✅ Generate routes.ts file
    const routesTarget = path.join(targetDir, "routes.ts");
    const routesContent = `
// Auto-generated by ripple-file-router
// @ts-ignore
export const modules = import.meta.glob("/src/pages/**/*.ripple", { eager: true });
`;

    if (fs.existsSync(routesTarget)) {
      const ans = await askQuestion(
        "routes.ts already exists in your project. Overwrite it? (y/n): "
      );

      if (ans.toLowerCase() === "y") {
        fs.writeFileSync(routesTarget, routesContent, "utf8");
        console.log("routes.ts overwritten in src/");
      } else {
        console.log("Skipped routes.ts");
      }
    } else {
      fs.writeFileSync(routesTarget, routesContent, "utf8");
      console.log("routes.ts created in src/");
    }
  } else {
    console.log("Unknown command. Use `ripple-file-router init`");
  }


  // ✅ Generate vercel.json at project root
const vercelConfigPath = path.join(process.cwd(), "vercel.json");
const vercelConfig = {
  rewrites: [
    { source: "/(.*)", destination: "/index.html" }
  ]
};

if (fs.existsSync(vercelConfigPath)) {
  const ans = await askQuestion(
    "vercel.json already exists in your project. Overwrite it? (y/n): "
  );

  if (ans.toLowerCase() === "y") {
    fs.writeFileSync(vercelConfigPath, JSON.stringify(vercelConfig, null, 2));
    console.log("vercel.json overwritten at project root");
  } else {
    console.log("Skipped vercel.json");
  }
} else {
  fs.writeFileSync(vercelConfigPath, JSON.stringify(vercelConfig, null, 2));
  console.log("vercel.json created at project root");
}

}

main();
