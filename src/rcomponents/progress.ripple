import {track, effect} from "ripple"
import {useRouter} from "../userouter"
export component TopProgress() {
  const router = useRouter();

  // reactive state
  let progress = track(0);     // 0..100
  let visible = track(false);  // show/hide
  let running = track(false);  // interval running flag

  let _tickId: number | null = null;

  // internal: gradual increment until ~90%
  const startProgress = () => {
    console.log("progress started")
    @visible = true;
    @running = true;
    @progress = 4; // initial tiny bar

    if (_tickId) {
      cancelAnimationFrame(_tickId);
      _tickId = null;
    }

    const step = () => {
      // small random growth to feel organic
      let inc = Math.random() * 4 + 1; // 1 -> 5
      // slower growth the further it goes
      if (@progress > 60) inc *= 0.6;
      if (@progress > 80) inc *= 0.3;
      @progress = Math.min(90, @progress + inc);
      _tickId = requestAnimationFrame(step);
    };

    _tickId = requestAnimationFrame(step);
  };

  // internal: finish and fade out
  const finishProgress = () => {
    // stop increment
    if (_tickId) {
      cancelAnimationFrame(_tickId);
      _tickId = null;
    }
    @progress = 100;

    // allow the bar to reach 100% visually, then fade
    setTimeout(() => {
      @visible = false;
      // remove bar after fade
      setTimeout(() => {
        @progress = 0;
        @running = false;
      }, 300); // match CSS fade-out
    }, 220); // slight delay so users see 100%
  };

  // (useful for lazy-loaded pages or manual triggers)
  (window as any).topProgress = {
    start: startProgress,
    finish: finishProgress,
    set: (n: number) => {
      @progress = Math.max(0, Math.min(100, n));
      @visible = @progress > 0 && @progress < 100;
    },
  };

  // react to router.loading
  effect(() => {
    const loading = router.loading; // reactive getter
    if (loading) {
      startProgress();
    } else {
      // if it wasn't running but progress > 0, still finish
      finishProgress();
    }
  });

  <div class="top-progress-wrapper" aria-hidden="true">
    <div
      class="top-progress-bar"
      style={{
        width: `${@progress}%`,
        opacity: @visible ? "1" : "0",
        transform: `scaleX(1)`,
      }}
    />
  </div>;
}

/* CSS â€” include in your global stylesheet or in a <style> block */
const styles = `
.top-progress-wrapper {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  height: 3px; /* adjust thickness */
  pointer-events: none;
  z-index: 9999;
  overflow: hidden;
}

.top-progress-bar {
  height: 100%;
  width: 0%;
  transform-origin: left center;
  transition: width 180ms linear, opacity 300ms ease;
  background: linear-gradient(90deg, #29d, #4ae, #60f);
  box-shadow: 0 0 8px rgba(50,150,255,0.5);
}
`;

// inject styles automatically (optional)
if (!document.getElementById("top-progress-styles")) {
  const s = document.createElement("style");
  s.id = "top-progress-styles";
  s.innerHTML = styles;
  document.head.appendChild(s);
}

export default TopProgress;
