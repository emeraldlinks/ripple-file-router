import type { Component } from 'ripple';
import { useRouter } from '../userouter';
import { track, effect } from 'ripple';
import {LinkProps} from "../types.ts"
/**
 * Props for the Link component.
 * 
 * @property href The destination href the link navigates to.
 * @property children The component to render inside the link.
 * @property onLoading Optional callback invoked when navigation starts or completes.
 * @property emitEvent Whether to emit router events for this link (default: true). If false, navigation occurs without triggering global events.
 * @property loadingComponent Optional component to render while this link is loading.
 */


/**
 * Ripple-compatible Link component.
 * 
 * Handles navigation via `useRouter()` and supports per-link loading state.
 * The `isLoading` state is reactive and scoped only to this Link instance.
 * Supports optional suppression of router events for more granular control.
 * 
 * Dynamic route parameters are accessible via `useRouter().params`.
 * Query parameters are accessible via `useRouter().queries`.
 */
export component Link({
  href,
  children,
  onLoading,
  loadingComponent,
  className,
  emitEvent = true,
}: LinkProps) {
  const router = useRouter();
  let isLoading = track(false); // reactive per-Link loading state

  /**
   * Subscribe to router events scoped to this link.
   * Only triggers when navigating to this link's href.
   */
  effect(() => {
    const offStart = router.on("start", (path) => {
      if (path === href) {
        @isLoading = true;
       
      }
    });

    const offComplete = router.on("complete", (path) => {
      if (path === href) {
        @isLoading = false;
        if (onLoading) onLoading();
      }
    });

    // Cleanup on unmount
    return () => {
      offStart();
      offComplete();
    };
  });

  /**
   * Handle click events on the link.
   * Supports meta/ctrl/shift clicks for opening in new tabs.
   */
  const handleClick = (e: MouseEvent) => {
    if (e.metaKey || e.ctrlKey || e.shiftKey || e.button !== 0) return;
    e.preventDefault();
    if (onLoading) onLoading(); // optional immediate callback
    router.push(href, emitEvent);
  };

    <a class={className} href={href} onClick={handleClick}>
      <children />
    </a>
}

export default Link;
