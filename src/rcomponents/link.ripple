import type { Component } from 'ripple';
import { useRouter } from '../userouter';
import { track, effect } from 'ripple';
import { LinkProps } from "../types.ts";

/**
 * @component
 * A navigation component for client-side routing.
 * @param href - The URL path to navigate to.
 * @param children - The content to render inside the link.
 * @param onLoading 
 * @param className
 * @loadingComponent
 * @emitEvent
 */
export component Link({
  href,
  children,
  onLoading,
  loadingComponent,
  className,
  emitEvent = true,
}: LinkProps) {
  const router = useRouter();
  let isLoading = track(false); // reactive per-Link loading state
  const currentUrl = track(router.path); // track current path

  

const handleClick = (e: MouseEvent) => {
  if (e.metaKey || e.ctrlKey || e.shiftKey || e.button !== 0) return;
  e.preventDefault();

  if (!href) return;

  // handle in-page anchor links
  if (href.startsWith("#")) {
    const el = document.querySelector(href);
    if (el) {
      // scroll to section smoothly
      el.scrollIntoView({ behavior: "smooth" });

      // update hash in URL without page reload
      history.pushState({}, "", href);
    }
    return;
  }

  if (@currentUrl === href) return;
  if (onLoading) onLoading();

  router.push(href, emitEvent);
};



  <a class={className} href={href} onClick={handleClick}>
    <children />
  </a>

  if (@isLoading && loadingComponent) {
    <loadingComponent />
  }
}

export default Link;
